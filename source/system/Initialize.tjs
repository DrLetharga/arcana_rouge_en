// Initialize.tjs - システムの初期化
// Copyright (C)2001-2006, W.Dee and contributors  改変・配布は自由です

// システムバージョン
var kagVersion = "3.28 stable rev. 3";

/*
	Debug.message へのショートカット
*/

var dm = Debug.message; // これで dm("message"); でコンソールに message を表示できる


/*
	デフォルトの「捕捉されない例外」ハンドラ
*/

System.exceptionHandler = function (e)
{
	// どこにも捕捉されない例外がシステム側で捕捉された場合、この関数が
	// 呼ばれる。e は例外オブジェクト。
	if(e instanceof "ConductorException")
	{
		// コンダクタの投げた例外の場合
		Debug.logAsError(); // ログのファイルへの書き出し動作の開始など
		var event_disabled = System.eventDisabled;
		System.eventDisabled = true;
			// エラーの理由を表示させている間にイベントが発生すると
			// やっかいなのでいったんイベント発生を停止させる
		System.inform(e.message);
		System.eventDisabled = event_disabled;
			// イベントを発生するかどうかを元の状態に
		return true; // true を返すと本体側で例外の処理は行わなくなる
	}
	else
	{
		return false; // false を返すと通常の例外処理
	}
};


/*
	パスの設定
	後に指定した物が、より優先されて使用される
*/


function useArchiveIfExists(name)
{
	// name が存在していたらそのアーカイブを使う
	var arcname;
	if(Storages.isExistentStorage(arcname = System.exePath + name))
		Storages.addAutoPath(arcname + ">");
}


//Y:大幅にフォルダ名称変更。パッチ等の動作要確認

//Storages.addAutoPath(System.exePath + "video/"); // exePath 以下の video/
//Storages.addAutoPath("video/"); // video フォルダ
//Storages.addAutoPath("others/"); // その他
//Storages.addAutoPath("rule/"); // ルール画像フォルダ
//Storages.addAutoPath("sound/"); // 効果音フォルダ
//Storages.addAutoPath("bgm/"); // BGM フォルダ
//Storages.addAutoPath("voice/"); // ボイスフォルダ　追加
//Storages.addAutoPath("fgimage/"); // 前景画像フォルダ
//Storages.addAutoPath("bgimage/"); // 背景画像フォルダ
//Storages.addAutoPath("scenario/"); // シナリオフォルダ
//Storages.addAutoPath("image/"); // そのほかの画像フォルダ
//Storages.addAutoPath("system/"); // システムフォルダ

Storages.addAutoPath(System.exePath + "movie/"); // exePath 以下の video/
//	Storages.addAutoPath("movie/"); // video フォルダ
//	Storages.addAutoPath("plugin/"); // plugin フォルダ
//	Storages.addAutoPath("g_rule/"); // ルール画像フォルダ
//	Storages.addAutoPath("s_se/"); // 効果音フォルダ
//	//Storages.addAutoPath("s_bgm/"); // BGM フォルダ
//	Storages.addAutoPath("s_voice/"); // ボイスフォルダ　追加
//	Storages.addAutoPath("s_sysse/"); // システムSEとかボイスフォルダ　追加
//	Storages.addAutoPath("g_std/"); // 立ち画像フォルダ　↑のフォルダ名を変更
//	Storages.addAutoPath("g_bg/"); // 背景画像フォルダ　↑のフォルダ名を変更
//	Storages.addAutoPath("g_cg/"); // イベント画像フォルダ　追加
//	Storages.addAutoPath("g_image/"); // そのほかの画像フォルダ
//	Storages.addAutoPath("g_numimage/"); // そのほかの画像フォルダ
//	Storages.addAutoPath("g_thm/"); // サムネ
//	Storages.addAutoPath("k_bonus/"); // オマケモード
//	//Storages.addAutoPath("k_macro/"); // マクロファイル格納
//	Storages.addAutoPath("k_others/"); // その他
//	Storages.addAutoPath("k_scenario/"); // シナリオフォルダ


Storages.addAutoPath("movie/");		// plugin フォルダ
Storages.addAutoPath("plugin/");	// plugin フォルダ
Storages.addAutoPath("g_rule/");	// ルール画像フォルダ
Storages.addAutoPath("s_bgm/");		// BGM フォルダ 2018/05/15追加
Storages.addAutoPath("s_se/");		// SE フォルダ  2018/05/15追加
Storages.addAutoPath("s_voice/"); // ボイスフォルダ　追加
Storages.addAutoPath("s_sysse/");	// システムSEとかボイスフォルダ　追加
Storages.addAutoPath("k_bonus/");	// オマケモード
Storages.addAutoPath("g_std/");		// 立ちキャラフォルダ　※ビッチ姫・ゲリラ少女両タイトルのキャラを格納※ 2018/05/15追加
Storages.addAutoPath("g_bg/");		// 背景画像フォルダ
Storages.addAutoPath("g_cg/");		// 
Storages.addAutoPath("g_thm/");		// 
Storages.addAutoPath("g_image/");	// そのほかの画像フォルダ
Storages.addAutoPath("k_others/");	// その他
Storages.addAutoPath("k_scenario/"); // シナリオフォルダ
Storages.addAutoPath("_sample/"); // サンプル
Storages.addAutoPath("_debag/"); // 
Storages.addAutoPath("system/");	// システムフォルダ

Storages.addAutoPath("k_scenario/01前半/");
Storages.addAutoPath("k_scenario/02後半/");


//サブフォルダ システム系画像
Storages.addAutoPath("g_image/01_title/");
Storages.addAutoPath("g_image/02_saveload/");
Storages.addAutoPath("g_image/03_conf/");
Storages.addAutoPath("g_image/04_sysjump/");
Storages.addAutoPath("g_image/05_log/");
Storages.addAutoPath("g_image/06_dialog/");
Storages.addAutoPath("g_image/07_game/");
Storages.addAutoPath("g_image/08_bonus/");
Storages.addAutoPath("g_image/09_CG/");
Storages.addAutoPath("g_image/10_SR/");
Storages.addAutoPath("g_image/11_BGM/");
Storages.addAutoPath("g_image/12_STD/");

//サブフォルダ ボーナス系
Storages.addAutoPath("k_bonus/01_CG/");
Storages.addAutoPath("k_bonus/02_SR/");
Storages.addAutoPath("k_bonus/03_BGM/");
Storages.addAutoPath("k_bonus/04_STD/");

//サブフォルダ SE
Storages.addAutoPath("s_se/seA/");
Storages.addAutoPath("s_se/seB/");
Storages.addAutoPath("s_se/seC/");
Storages.addAutoPath("s_se/seD/");
Storages.addAutoPath("s_se/seE/");
Storages.addAutoPath("s_se/seF/");
Storages.addAutoPath("s_se/seG/");
Storages.addAutoPath("s_se/seJ/");
Storages.addAutoPath("s_se/seシステム系/");
Storages.addAutoPath("s_se/エフェクト系/");
Storages.addAutoPath("s_se/pap/");


Storages.addAutoPath("g_std/ch01/");	// 両タイトルのキャラを格納※
Storages.addAutoPath("g_std/ch02/");	// 両タイトルのキャラを格納※
Storages.addAutoPath("g_std/ch03/");	// 両タイトルのキャラを格納※
Storages.addAutoPath("g_std/ch04/");	// 両タイトルのキャラを格納※
Storages.addAutoPath("g_std/mob/");	// 両タイトルのキャラを格納※
Storages.addAutoPath("g_std/w/");	// 両タイトルのキャラを格納※



// 分割用に書き換えたファイル。パッチ的な扱いで最後に登録追加　2019/10/10
Storages.addAutoPath("add_split/");


// パッチアーカイブの検索と使用
// もしこれらの名前を持ったアーカイブが実行可能ファイルと
// 同じ場所にあった場合、それを優先して使う

//Y:大幅にフォルダ名称変更。パッチ等の動作要確認

	//useArchiveIfExists("video.xp3");
	//useArchiveIfExists("others.xp3");
	//useArchiveIfExists("rule.xp3");
	//useArchiveIfExists("sound.xp3");
	//useArchiveIfExists("bgm.xp3");
	//useArchiveIfExists("voice.xp3");
	//useArchiveIfExists("fgimage.xp3");
	//useArchiveIfExists("bgimage.xp3");
	//useArchiveIfExists("scenario.xp3");
	//useArchiveIfExists("image.xp3");
	//useArchiveIfExists("system.xp3");

//今回ちょっと量あるから個別xp3にする
	useArchiveIfExists("movie.xp3");
	useArchiveIfExists("plugin.xp3");
	useArchiveIfExists("g_rule.xp3");
	useArchiveIfExists("s_se.xp3");
	useArchiveIfExists("s_bgm.xp3");
	useArchiveIfExists("s_voice.xp3");
	useArchiveIfExists("s_sysse.xp3");
	useArchiveIfExists("g_std.xp3");
	useArchiveIfExists("g_bg.xp3");
	useArchiveIfExists("g_cg.xp3");
	useArchiveIfExists("g_image.xp3");
//	useArchiveIfExists("g_numimage.xp3");
	useArchiveIfExists("g_thm.xp3");
	useArchiveIfExists("k_bonus.xp3");
//	useArchiveIfExists("k_macro.xp3");
	useArchiveIfExists("k_others.xp3");
	useArchiveIfExists("k_scenario.xp3");


//	if(Storages.isExistentStorage(System.exePath + "data.xp3"))
//	{
	//シナリオ
	//	Storages.addAutoPath(System.exePath  + "data.xp3>k_scenario/");
	//	Storages.addAutoPath(System.exePath  + "data.xp3>k_scenario/01前半/");
	//	Storages.addAutoPath(System.exePath  + "data.xp3>k_scenario/02後半/");

	//システム系画像
	if(Storages.isExistentStorage(System.exePath + "g_image.xp3"))
	{
		Storages.addAutoPath(System.exePath  + "g_image.xp3>");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>01_title/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>02_saveload/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>03_conf/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>04_sysjump/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>05_log/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>06_dialog/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>07_game/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>08_bonus/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>09_CG/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>10_SR/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>11_BGM/");
		Storages.addAutoPath(System.exePath  + "g_image.xp3>12_STD/");
	}

	// ボーナス系
	if(Storages.isExistentStorage(System.exePath + "k_bonus.xp3"))
	{
		Storages.addAutoPath(System.exePath  + "k_bonus.xp3>");
		Storages.addAutoPath(System.exePath  + "k_bonus.xp3>01_CG/");
		Storages.addAutoPath(System.exePath  + "k_bonus.xp3>02_SR/");
		Storages.addAutoPath(System.exePath  + "k_bonus.xp3>03_BGM/");
		Storages.addAutoPath(System.exePath  + "k_bonus.xp3>04_STD/");
	}

	//SE
	if(Storages.isExistentStorage(System.exePath + "s_se.xp3"))
	{
		Storages.addAutoPath(System.exePath  + "s_se.xp3>pap/");
	}

	//立ち
	if(Storages.isExistentStorage(System.exePath + "g_std.xp3"))
	{
		Storages.addAutoPath(System.exePath  + "g_std.xp3>ch01/");
		Storages.addAutoPath(System.exePath  + "g_std.xp3>ch02/");
		Storages.addAutoPath(System.exePath  + "g_std.xp3>ch03/");
		Storages.addAutoPath(System.exePath  + "g_std.xp3>ch04/");
		Storages.addAutoPath(System.exePath  + "g_std.xp3>mob/");
		Storages.addAutoPath(System.exePath  + "g_std.xp3>w/");
	}

useArchiveIfExists("system.xp3");

useArchiveIfExists("ARCANA_ROUGE_patch.xp3");

// 追加のパッチ用アーカイブの検索
for(var i = 2; ; i++)
{
	// パッチ用アーカイブ patch2.xp3, patch3.xp3 ... がある場合はそちらを
	// 優先して読み込むように
	if(Storages.isExistentStorage(System.exePath + "ARCANA_ROUGE_patch" + i + ".xp3"))
		Storages.addAutoPath(System.exePath + "ARCANA_ROUGE_patch" + i + ".xp3>");
	else
		break;
}

delete useArchiveIfExists; // useArchiveIfExists は使い終わったので一応消しておく

/*
	システムバージョン
*/
Debug.notice("OS : " + System.osName + " (" + System.platformName + ")");
Debug.notice("KAG : " + kagVersion);
Debug.notice("Kirikiri : " + System.versionString);

/*
	( デバッグ ) 時間計測
*/

var parseStartTick = System.getTickCount();


/*
	スクリプト読み込みラッパー
*/

function KAGLoadScript(name)
{
	var start = System.getTickCount();
	Scripts.execStorage(name);
	dm(name + " を読み込みました(" + (System.getTickCount() - start) + "ms)");
}

var loaded_scripts = %[];

function KAGLoadScriptOnce(name)
{
	// 指定したスクリプトを読み込むが、一回しか読み込まない
	if(global.loaded_scripts[name] === true) return; // 既に読み込んでいる
	global.KAGLoadScript(name);
	global.loaded_scripts[name] = true;
}

/*
	Config.tjs 読み込み
*/
if(Storages.isExistentStorage("Config.tjs"))
{
	KAGLoadScript("Config.tjs");
}
else if(Storages.isExistentStorage("Config.~new"))
{
	System.inform("Config.tjs が見つかりません。\nsystem フォルダにある "
		"Config.~new ファイルを Config.tjs に改名してください。");
	System.exit();
}
else
{
	throw new Exception("Config.tjs が見つかりません。");
}

/*
	Config.tjs バージョンチェック
*/

if(typeof global.config_version == "undefined" || config_version != kagVersion)
{
	KAGLoadScript("UpdateConfig.tjs");
}

/*
	二重起動のチェック
*/

// 実行可能ファイルのパスをキーにしてロックを行う
if(!System.createAppLock(System.exePath.replace(/[^A-Za-z]/g, '_')))
{
	// すでに起動している
	System.inform(System.title + "はすでに起動しています");
	System.exit();
}


/*
	オン・デマンド・ローディングを行うための定義
*/


property askYesNo { getter() { KAGLoadScript("YesNoDialog.tjs"); return global.askYesNo; } }
property CheckBoxLayer { getter() { KAGLoadScript("CheckBoxLayer.tjs"); return global.CheckBoxLayer; } }
property ButtonLayer { getter() { KAGLoadScript("ButtonLayer.tjs"); return global.ButtonLayer; } }
property EditLayer { getter() { KAGLoadScript("EditLayer.tjs"); return global.EditLayer; } }
property KAGPlugin { getter() { KAGLoadScript("Plugin.tjs"); return global.KAGPlugin; } }

/*
	各システム読み込み
*/
dm("KAG System スクリプトを読み込んでいます...");

KAGLoadScript("Utils.tjs");
KAGLoadScript("KAGLayer.tjs");
KAGLoadScript("HistoryLayer.tjs");
KAGLoadScript("BGM.tjs");
KAGLoadScript("SE.tjs");
KAGLoadScript("Movie.tjs");
KAGLoadScript("Conductor.tjs");
KAGLoadScript("AnimationLayer.tjs");
KAGLoadScript("GraphicLayer.tjs");
KAGLoadScript("MessageLayer.tjs");
KAGLoadScript("Menus.tjs");
KAGLoadScript("DefaultMover.tjs");
KAGLoadScript("MainWindow.tjs");
if(Storages.isExistentStorage("Override.tjs"))
	KAGLoadScript("Override.tjs");
if(Storages.isExistentStorage(System.exePath + "Override2.tjs"))
	KAGLoadScript(System.exePath + "Override2.tjs");


/*
	( デバッグ ) 時間計測
*/
dm("スクリプトの読み込みに " + (System.getTickCount() - parseStartTick) + "ms かかりました");
parseStartTick = System.getTickCount();

/*
	( デバッグ ) VM コードのダンプ
*/

// Scripts.dump();

/*
	( デバッグ ) 時間計測
*/

parseStartTick = System.getTickCount();


/*
	KAG メインウィンドウの作成
	グローバルメンバ kag が存在しなければ KAGWindow クラスの
	オブジェクトを作成して入れる
*/

global.kag = new KAGWindow() if typeof global.kag == "undefined";




/*
	グローバルから簡単にアクセスできるように、いくつかの
	変数の別名を作成
*/

var f = kag.flags;   // ユーザ変数 (フラグ)
var sf = kag.sflags; // システム変数 (システム)
var tf = kag.tflags; // 一時変数 (一時フラグ)

property mp
{
	getter { return kag.conductor.macroParams; }
}

/*
	( デバッグ ) 時間計測
*/
dm("KAGMainWindow のコンストラクタで " + (System.getTickCount() - parseStartTick) + "ms かかりました");
delete parseStartTick;


/*
	AfterInit.tjs が存在すれば実行
*/
if(Storages.isExistentStorage("AfterInit.tjs"))
	KAGLoadScript("AfterInit.tjs");
if(Storages.isExistentStorage(System.exePath + "AfterInit2.tjs"))
	KAGLoadScript(System.exePath + "AfterInit2.tjs");

/*
	コマンドラインパラメータとして -ovr が指定されていれば
	そのパラメータを TJS 式として実行
*/
{
	var ovr = System.getArgument('-ovr');
	if(ovr !== void && ovr != 'yes') Scripts.eval(ovr);
}

/*
	first.ks の実行
*/

kag.process("first.ks");

