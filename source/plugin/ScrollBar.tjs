// スクロールバーに付随する各種ボタンのベースになるクラス
class ScrollBarButtonBaseLayer extends ButtonLayer
{
	// コンストラクタ
	function ScrollBarButtonBaseLayer(window, parent)
	{
		super.ButtonLayer(window, parent);
		focusable = false;
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// 状態 s に対応する画像を描画するメソッド（オーバーライド）
	function drawState(s)
	{
		// s :  0 : 普通の状態
		//      1 : ボタンが押された状態
		//      2 : ボタンの上にマウスカーソルがある状態
		if(!enabled)
		{
			s = 0; // 無効状態
		}

		if(Butt_imageLoaded)
		{
			// ボタンイメージが読み込まれている
			// TODO: keyboard focus
			//mine:縦画像用に書き換え
			//imageLeft = -s * width;
			imageTop = -s * height;

		}
		else
		{
			if(Butt_keyPressed) s = 1; // 押されている

			// 枠とキャプションを描画
			// クリア
			face = dfAlpha;
			colorRect(0, 0, width, height, 0, -255);
			// 下地を塗る
			if(Butt_color != clNone)
				colorRect(0, 0, width, height, Butt_color);
			// 文字のサイズを得る
			var tw, th;
			tw = font.getTextWidth(Butt_caption);
			th = font.getTextHeight(Butt_caption);
			var r = (Butt_color >> 16) & 0xFF;
			var g = (Butt_color >> 8) & 0xFF;
			var b = Butt_color & 0xFF;
			var _r, _g, _b;
			_r = r < 127 ? r + 128 : 255;
			_g = g < 127 ? g + 128 : 255;
			_b = b < 127 ? b + 128 : 255;
			var bright = (_r << 16) | (_g << 8) | _b;
			_r = r > 128 ? r - 128 : 0;
			_g = g > 128 ? g - 128 : 0;
			_b = b > 128 ? b - 128 : 0;
			var dark = (_r << 16) | (_g << 8) | _b;
			if(s == 0 || s == 2)
			{
				// 通常あるいはマウスが上にある
				colorRect(0, 0, width, 1, bright);
				colorRect(0, 1, 1, height-2, bright);
				colorRect(width-1, 1, 1, height-1, dark);
				colorRect(1, height-1, width-2, 1, dark);
				drawText((width-tw)>>1, (height-th)>>1, 
					Butt_caption, Butt_captionColor, nodeEnabled?255:128);
			}
			else
			{
				// 押されている
				colorRect(0, 0, width, 1, dark);
				colorRect(0, 1, 1, height-2, dark);
				colorRect(width-1, 1, 1, height-1, bright);
				colorRect(1, height-1, width-2, 1, bright);
				drawText(((width-tw)>>1) +1, ((height-th)>>1) +1, 
					Butt_caption, Butt_captionColor, nodeEnabled?255:128);
			}

			if(s != 0)
				colorRect(2, 2, width-4, height-4, clHighlight, 64); // ハイライトする
		}
	}
}

// スクロールバーの上下(左右)のボタン用のクラス
class ScrollBarButtonLayer extends ScrollBarButtonBaseLayer
{
	var onClickFunction;
	var timer;

	// コンストラクタ
	function ScrollBarButtonLayer(window, parent, func)
	{
		super.ButtonLayer(window, parent);
		visible = true;
		onClickFunction = func;

		timer = new Timer(onTimer, "");
		timer.capacity = 1;
	}

	// デストラクタ
	function finalize()
	{
		invalidate timer;
		super.finalize();
	}

	// 以下３つはマウス系イベントハンドラ（いずれもオーバーライド）
	function onMouseDown(x, y, button, shift)
	{
		if(enabled && button == mbLeft)
		{
			onClickFunction(this);
			timer.interval = 700;
			timer.enabled = true;
		}
		super.onMouseDown(...);
	}

	function onMouseUp(x, y, button, shift)
	{
		timer.enabled = false;
		super.onMouseUp(...);
	}

	function onMouseLeave()
	{
		timer.enabled = false;
		super.onMouseLeave(...);
	}

	// タイマーから呼び出されるメソッド
	function onTimer()
	{
		if(this isvalid)
		{
			onClickFunction(this);
			timer.interval = 50;
		}
	}
}

// スクロールバーのベース(背景)用のクラス
class ScrollBarBaseLayer extends ScrollBarButtonLayer
{
	// コンストラクタ
	function ScrollBarBaseLayer(window, parent, func)
	{
		super.ScrollBarButtonLayer(...);
		cursor = crDefault;
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// 状態 s に対応する画像を描画するメソッド（オーバーライド）
	function drawState(s)
	{
		switch(s)
		{
			case 1:
				super.drawState(2);
				break;
			case 2:
				super.drawState(0);
				break;
			default:
				super.drawState(s);
		}
	}
}

// スライダー(ドラッグして動かせる部分)用のクラス
class ScrollBarSliderLayer extends ScrollBarButtonBaseLayer
{
	var _minPos = 0, _maxPos = 100;
	var offset;
	var onMove;
	var onMoveCompleted;

	// コンストラクタ
	function ScrollBarSliderLayer(window, parent, movefunc, movecompfunc)
	{
		super.ButtonLayer(window, parent);
		cursor = crDefault;
		onMove = movefunc;
		onMoveCompleted = movecompfunc;
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// 状態 s に対応する画像を描画するメソッド（オーバーライド）
	function drawState(s)
	{
		super.drawState(s == 1 ? 2 : s);
	}

	// 現在位置を取得するメソッド
	function getPos()
	{
		var _maxPos = this._maxPos - length;
		var pos = parentCursorPos - offset;
		if(pos < _minPos)
			pos = _minPos;
		else if(pos > _maxPos)
			pos = _maxPos;
		return pos;
	}

	// 値が変わった時に呼び出されるメソッド
	function onValueChanged(ratio)
	{
		var _maxPos = this._maxPos - length;
		set(_minPos + int((_maxPos - _minPos) * ratio));
	}

	// 以下３つはマウス系イベントハンドラ（いずれもオーバーライド）
	function onMouseDown(x, y, button, shift)
	{
		super.onMouseDown(...);
		offset = parentCursorPos - get();
	}

	function onMouseMove(x, y, shift)
	{
		super.onMouseMove(...);
		if(Butt_mouseDown)
		{
			var pos = getPos();
			onMove(this, (pos - _minPos) / (_maxPos - length - _minPos));
			set(pos);
		}
	}

	function onMouseUp(x, y, button, shift)
	{
		if(enabled && button == mbLeft)
			onMoveCompleted(this, (getPos() - _minPos) / (_maxPos - length - _minPos));
		super.onMouseUp(...);
	}

	// 最小値の時の位置を設定／取得するプロパティ
	property minPos
	{
		setter(pos)
		{
			_minPos = pos;
		}
		getter()
		{
			return _minPos;
		}
	}

	// 最大値の時の位置を設定／取得するプロパティ
	property maxPos
	{
		setter(pos)
		{
			_maxPos = pos;
		}
		getter()
		{
			return _maxPos;
		}
	}		
}

// 水平スライダー用のクラス
class HorizontalScrollBarSliderLayer extends ScrollBarSliderLayer
{
	// コンストラクタ
	function HorizontalScrollBarSliderLayer(window, parent, movefunc, movecompfunc)
	{
		super.ScrollBarSliderLayer(...);
		height = parent.height;
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// 位置を設定するメソッド
	function set(pos)
	{
		left = pos;
	}

	// 現在位置を返すメソッド
	function get()
	{
		return left;
	}

	// 値が変わった時に呼び出されるメソッド
	function onValueChanged(ratio)
	{
		var _maxPos = this._maxPos - length;
		set(_minPos + int((_maxPos - _minPos) * (1. - ratio)));
	}

	// 親レイヤでのマウスカーソルの位置（x座標）を取得するプロパティ
	property parentCursorPos
	{
		getter()
		{
			return parent.cursorX;
		}
	}

	// トラックバーの長さを設定／取得するプロパティ
	property length
	{
		setter(l)
		{
			width = l;
		}
		getter()
		{
			return width;
		}
	}
}

// 垂直スライダー用のクラス
class VerticalScrollBarSliderLayer extends ScrollBarSliderLayer
{
	// コンストラクタ
	function VerticalScrollBarSliderLayer(window, parent, movefunc, movecompfunc)
	{
		super.ScrollBarSliderLayer(...);
		width = parent.width;
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// 位置を設定するメソッド
	function set(pos)
	{
		top = pos;
	}

	// 現在位置を返すメソッド
	function get()
	{
		return top;
	}

	// 親レイヤでのマウスカーソルの位置（y座標）を取得するプロパティ
	property parentCursorPos
	{
		getter()
		{
			return parent.cursorY;
		}
	}

	property length
	{
		setter(l)
		{
			height = l;
		}
		getter()
		{
			return height;
		}
	}
}

// スクロールバークラス
class ScrollBar
{
	var base;
	var incButton, decButton;
	var slider;
	var _minVal = 0, _maxVal = 100, _value = 0;
	var _unitIncrement = 1, _blockIncrement = 10;
	var _visibleAmount;
	var onValueChangedFunction;

	// コンストラクタ
	function ScrollBar(window, parent, func)
	{
		onValueChangedFunction = func;
		base = new ScrollBarBaseLayer(window, parent, onBaseClick);
		base.color = 0xEEEEEE;
		incButton = new ScrollBarButtonLayer(window, base, onIncrement);
		incButton.setPos(0, 0);
		incButton.color = 0xCCCCCC;
		incButton.visible = true;
		decButton = new ScrollBarButtonLayer(window, base, onDecrement);
		decButton.setPos(0, 0);
		decButton.color = 0xCCCCCC;
		decButton.visible = true;
	}

	// デストラクタ
	function finalize()
	{
		invalidate slider if slider !== void;
		invalidate decButton;
		invalidate incButton;
		invalidate base;
	}

	// 位置を設定するメソッド
	function setPos(x, y)
	{
		base.setPos(x, y);
	}

	// サイズを設定するメソッド
	function setSize(width, height)
	{
		base.setSize(width, height);
	}

	// ベースレイヤがクリックされた時に呼び出されるメソッド
	function onBaseClick(obj)
	{
		var c = cursorPos;
		var s = sliderPos;
		if(c < s)
			value -= _blockIncrement;
		else if(c > s + sliderLength)
			value += _blockIncrement;
	}

	// 値を増やすボタン（≪ or ▼）が押された時に呼び出されるメソッド
	function onIncrement(obj)
	{
		value += _unitIncrement;
	}

	// 値を減らすボタン（≫ or ▲）が押された時に呼び出されるメソッド
	function onDecrement(obj)
	{
		value -= _unitIncrement;
	}

	// スライダーがドラッグされた時に呼び出されるメソッド
	function onSliderMoved(obj, ratio)
	{
		value = _minVal + int((_maxVal - _minVal + 1) * ratio + .5);
	}

	// スライダーのドラッグが終わった時に呼び出されるメソッド
	function onSliderMoveCompleted(obj, ratio)
	{
		onSliderMoved(...);
	}

	// 値が変わった時に呼び出されるメソッド
	function onValueChanged(notify = true)
	{
		if(slider !== void)
			slider.onValueChanged((_value - _minVal) / (_maxVal - _minVal));
		if(notify)
			onValueChangedFunction(value);
	}

	// 最小値を設定／取得するプロパティ
	property minVal
	{
		setter(val)
		{
			_minVal = val;
			if(_minVal >= _maxVal)
				_maxVal = _minVal + 1;
			if(_value < _minVal)
				_value = _minVal;
			onValueChanged(false);
		}
		getter()
		{
			return _minVal;
		}
	}

	// 最大値を設定／取得するプロパティ
	property maxVal
	{
		setter(val)
		{
			_maxVal = val;
			if(_maxVal <= _minVal)
				_minVal = _maxVal - 1;
			if(_value > _maxVal)
				_value = _maxVal;
			onValueChanged(false);
		}
		getter()
		{
			return _maxVal;
		}
	}

	// ボタンを押した時に増減する値を設定／取得するプロパティ
	property unitIncrement
	{
		setter(val)
		{
			_unitIncrement = val;
		}
		getter()
		{
			return _unitIncrement;
		}
	}

	// ベースレイヤをクリックした時に増減する値を設定／取得するプロパティ
	property blockIncrement
	{
		setter(val)
		{
			_blockIncrement = val;
		}
		getter()
		{
			return _blockIncrement;
		}
	}

	// スライダーの長さを設定／取得するプロパティ
	property visibleAmount
	{
		setter(val)
		{
			if(slider !== void)
			{
				_visibleAmount = val;
				var maxLength = slider.maxPos - slider.minPos;
				if(_visibleAmount >= maxLength)
					_visibleAmount = maxLength - 1;
				else if(_visibleAmount < 16)
					_visibleAmount = 16;
				sliderLength = _visibleAmount;
				onValueChanged(false);
			}
		}
		getter()
		{
			return _visibleAmount;
		}
	}

	// スクロールバーの長さに対するスライダーの長さの比を設定／取得するプロパティ
	property visibleAmountRatio
	{
		setter(val)
		{
			visibleAmount = int((slider.maxPos - slider.minPos) * val);
		}
		getter()
		{
			return visibleAmount / (slider.maxPos - slider.minPos);
		}
	}

	// 値を設定／取得するプロパティ
	property value
	{
		setter(val)
		{
			_value = val;
			if(_value < _minVal)
				_value = _minVal;
			else if(_value > _maxVal)
				_value = _maxVal;
			onValueChanged();
		}
		getter()
		{
			return _value;
		}
	}

	// 使用可／不可を設定／取得するプロパティ
	property enabled
	{
		setter(e)
		{
			base.enabled = e;
		}
		getter()
		{
			return base.enabled;
		}
	}

	// 可視／不可視を設定／取得するプロパティ
	property visible
	{
		setter(v)
		{
			base.visible = v;
		}
		getter()
		{
			return base.visible;
		}
	}

	// 左端の位置を設定／取得するプロパティ
	property left
	{
		setter(val)
		{
			setPos(val, top);
		}
		getter()
		{
			return base.left;
		}
	}

	// 上端の位置を設定／取得するプロパティ
	property top
	{
		setter(val)
		{
			setPos(left, val);
		}
		getter()
		{
			return base.top;
		}
	}

	// 幅を設定／取得するプロパティ
	property width
	{
		setter(val)
		{
			setSize(val, height);
		}
		getter()
		{
			return base.width;
		}
	}

	// 高さを設定／取得するプロパティ
	property height
	{
		setter(val)
		{
			setSize(width, val);
		}
		getter()
		{
			return base.height;
		}
	}

	// 重ね合わせ順序を設定／取得するプロパティ
	property absolute
	{
		setter(val)
		{
			base.absolute = val;
		}
		getter()
		{
			return base.absolute;
		}
	}

	// 背景色を設定／取得するプロパティ
	property baseColor
	{
		setter(color)
		{
			base.color = color;
		}
		getter()
		{
			return base.color;
		}
	}

	// ボタンの色を設定／取得するプロパティ
	property buttonColor
	{
		setter(color)
		{
			incButton.color = decButton.color = color;
		}
		getter()
		{
			return incButton.color;
		}
	}

	// ボタンの文字色を設定／取得するプロパティ
	property buttonCaptionColor
	{
		setter(color)
		{
			incButton.captionColor = decButton.captionColor = color;
		}
		getter()
		{
			incButton.captionColor;
		}
	}

	// スライダーの色を設定／取得するプロパティ
	property sliderColor
	{
		setter(color)
		{
			slider.color = color if slider !== void;
		}
		getter()
		{
			return slider !== void ? slider.color : void;
		}
	}

	// visibleAmountRatio から自動的に blockIncrement の値を設定するためのプロパティ
	property ratio
	{
		setter(val)
		{
			visibleAmountRatio = val;
			var bi = int((maxVal - minVal) * visibleAmountRatio / (1 - visibleAmountRatio));
			blockIncrement = bi > 0 ? bi : 1;
		}
		getter()
		{
			return visibleAmountRatio;
		}
	}
}

// 水平スクロールバークラス
class HorizontalScrollBar extends ScrollBar
{
	// コンストラクタ
	function HorizontalScrollBar(window, parent, func)
	{
		super.ScrollBar(...);

		slider = new HorizontalScrollBarSliderLayer(window, base, onSliderMoved, onSliderMoveCompleted);
		slider.minPos = 16;
		slider.maxPos = parent.width - 16;
		slider.color = 0xCCCCCC;
		slider.visible = true;

		incButton.caption = "≪";
		decButton.caption = "≫";

		setSize(parent.width, 16);
		setPos(0, parent.height - 16);

		visibleAmount = width \ 10;

		onValueChanged(false);
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// サイズを設定するメソッド（オーバーライド）
	function setSize(width, height)
	{
		super.setSize(...);
		incButton.setSize(height, height);
		decButton.setSize(height, height);
		decButton.left = width - height;
		slider.height = height;
		slider.minPos = height;
		slider.maxPos = this.width - height;
	}

	// ベースレイヤがクリックされた時に呼び出されるメソッド（オーバーライド）
	function onBaseClick(obj)
	{
		var c = cursorPos;
		var s = sliderPos;
		if(c < s)
			value += _blockIncrement;
		else if(c > s + sliderLength)
			value -= _blockIncrement;
		onValueChanged();
	}

	// スライダーがドラッグされた時に呼び出されるメソッド（オーバーライド）
	function onSliderMoved(obj, ratio)
	{
		value = _minVal + int((_maxVal - _minVal + 1) * (1. - ratio) + .5);
	}

	// マウスカーソルの位置を取得するプロパティ
	property cursorPos
	{
		getter()
		{
			return base.cursorX;
		}
	}

	// スライダーの位置を取得するプロパティ
	property sliderPos
	{
		getter()
		{
			return slider.left;
		}
	}

	// スライダーの長さを設定／取得するプロパティ
	property sliderLength
	{
		setter(length)
		{
			slider.width = length;
		}
		getter()
		{
			return slider.width;
		}
	}
}

// 垂直スクロールバークラス
class VerticalScrollBar extends ScrollBar
{
	// コンストラクタ
	function VerticalScrollBar(window, parent, func)
	{
		super.ScrollBar(...);

		slider = new VerticalScrollBarSliderLayer(window, base, onSliderMoved, onSliderMoveCompleted);
		slider.minPos = 16;
		slider.maxPos = parent.height - 16;
		slider.color = 0xCCCCCC;
		slider.visible = true;

		incButton.caption = "▼";
		decButton.caption = "▲";

		setSize(16, parent.height);
		setPos(parent.width - 16, 0);

		visibleAmount = height \ 10;

		onValueChanged(false);
	}

	// デストラクタ
	function finalize()
	{
		super.finalize();
	}

	// サイズを設定するメソッド（オーバーライド）
	function setSize(width, height)
	{
		super.setSize(...);
		incButton.setSize(width, width);
		incButton.top = height - width;
		decButton.setSize(width, width);
		slider.width = width;
		slider.minPos = width;
		slider.maxPos = this.height - width;
	}

	// マウスカーソルの位置を取得するプロパティ
	property cursorPos
	{
		getter()
		{
			return base.cursorY;
		}
	}

	// スライダーの位置を取得するプロパティ
	property sliderPos
	{
		getter()
		{
			return slider.top;
		}
	}

	// スライダーの長さを設定／取得するプロパティ
	property sliderLength
	{
		setter(length)
		{
			slider.height = length;
		}
		getter()
		{
			return slider.height;
		}
	}
}
