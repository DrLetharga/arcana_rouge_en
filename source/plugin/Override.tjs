
//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==

//マウスでゲームウィンドウサイズ任意に変更プラグイン
Plugins.link('windowEx.dll');

//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==

//YESNOダイヤログ用の記述
if(Storages.isExistentStorage("Config_YesNoDialog.tjs"))
	KAGLoadScript("Config_YesNoDialog.tjs");
if(Storages.isExistentStorage("Config_MyHistoryLayer.tjs"))
	KAGLoadScript("Config_MyHistoryLayer.tjs");

//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==

//メッセージフレーム半透明拡張
Scripts.execStorage("MessageLayerFrameOpacity.tjs");

//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==

// (拡張履歴レイヤで使うので)スクロールバークラス(ScrollBarクラス)の定義を読み込みます
KAGLoadScript("ScrollBar.tjs");
// 拡張履歴レイヤ(ExtendedHistoryLayerクラス)の定義を読み込みます
KAGLoadScript("ExtendedHistoryLayer.tjs");

// 拡張履歴レイヤを使用するために KAGWindow クラスを継承して
// KAGWindowEx クラスを作成します
class KAGWindowEx extends KAGWindow
{
	// コンストラクタ
	function KAGWindowEx()
	{
		// スーパークラスのコンストラクタを呼び出します
		super.KAGWindow(...);

		// スーパークラスのコンストラクタ内で普通の履歴レイヤが作られているので
		// 拡張履歴レイヤに差し替える前に無効化しておきます

		// 普通の履歴レイヤはウィンドウ(kagオブジェクト)が管理しているので
		// まず普通の履歴レイヤのオブジェクトを管理対象から外します
		remove(historyLayer);
		// 普通の履歴レイヤのオブジェクトを無効化します
		invalidate historyLayer;

		// 拡張履歴レイヤオブジェクトを作成します
		historyLayer = new ExtendedHistoryLayer(this, fore.base);

		// 拡張履歴レイヤオブジェクトをウィンドウに管理してもらいます
		add(historyLayer);
	}

	// デストラクタ
	function finalize()
	{
		// スーパークラスのデストラクタを呼び出します
		super.finalize();
	}
}

//---------------------------------------- 拡張版メッセージ履歴の設定 -----


function ExtendedHistoryLayer_config()
{
// ◆ 履歴レイヤの背景に表示する画像
// 履歴レイヤ背景用の画像ファイル名を指定します
// 空文字列("")を指定すると背景に画像を表示せず
// デフォルトの背景(黒色で半透明の背景)を表示します
;backgroundStorage = "BG_log";


// ◆ メッセージ履歴アクションボタン用画像
// メッセージ履歴アクションボタン用の画像ファイル名を指定します
// 空文字列("")を指定するとメッセージ履歴アクションボタンを表示せず
// デフォルトのメッセージ履歴アクションシステム(リンク形式)を使用します
;actionButtonStorage = "log_voice";


// ◆ メッセージ履歴アクションボタン配置時のマージン
// メッセージ履歴アクションボタンの左端(縦書き時は上端)と
// 画面の左端(縦書き時は上端)の間の距離をピクセル単位で指定します
;actionButtonMargin = 50;


// ◆ メッセージ履歴画面を閉じるボタン用画像ファイル名
// 空文字列("")を指定すると画像を表示せず
// closeButtonCaption で指定されたテキストを表示します
;closeButtonStorage = "log_hide";


// ◆ メッセージ履歴画面を閉じるボタンのサイズと位置
// ※画像を使う場合(closeButtonStorage が "" でない場合)は幅と高さは無視されます
;closeButtonWidth = 32; // 幅
;closeButtonHeight = 32; // 高さ
;closeButtonLeft = 1185; // 左端位置
;closeButtonTop = 650; // 上端位置


// ◆ メッセージ履歴画面を閉じるボタンの色
// ボタンの色を 0xRRGGBB 形式で指定します
// ※画像を使う場合(closeButtonStorage が "" でない場合)は無視されます
;closeButtonColor = 0xB8B8FF;


// ◆ メッセージ履歴画面を閉じるボタンに表示するテキストとその色
// ※画像を使う場合(closeButtonStorage が "" でない場合)はどちらも無視されます
;closeButtonCaption = "×";
;closeButtonCaptionColor = 0x000000;


// ◆ メッセージ履歴画面を閉じるボタンのヒント
// ※ button タグの hint 属性に相当します
;closeButtonHint = "メッセージ履歴を閉じる";


// ◆ スクロールバーのサイズと位置
;scrollBarWidth = 20; // 幅
;scrollBarHeight = 600; // 高さ
;scrollBarLeft = 1190; // 左端位置
;scrollBarTop = 40; // 上端位置


// ◆ スクロールバーの各部の色
// スクロールバーの各部の色を 0xRRGGBB 形式で指定します
;scrollBarBaseColor = 0x930061; // 背景色
;scrollBarButtonColor = 0xe81fa8; // 上下(左右)のボタンの色
;scrollBarButtonCaptionColor = 0x930061; // 上下(左右)のボタンの文字（横書きの場合は▲と▼、縦書きの場合は≫と≪）の色
;scrollBarSliderColor = 0xe81fa8; // スライダー(ドラッグして動かせる部分)の色
}

// KAGWindowEx クラスのオブジェクトとして kag オブジェクトを作成します
global.kag = new KAGWindowEx() if typeof global.kag == "undefined";

// 設定のためのメソッドはこれ以後使わないので削除しておきます
delete ExtendedHistoryLayer_config;

//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==
